// Run mongodb
// C:/Users/PakDragoon/mongodb/bin/mongod.exe --dbpath=C:/Users/PakDragoon/mongodb-data

Hassan Ali
hassan123@gmail.com
TheCompany
qwerty123456

// app.use((req, res, next) => {
//     if(req.method === 'GET' || req.method ==='POST') {
//         res.status(503).send('Servers are down for maintenance')
//     } else {
//         next()
//     }
// })

//Get all Users
// router.get('/users', auth, async (req, res) => {
//     try {
//         const users = await User.find({})
//         res.status(201).send(users)
//     } catch (error) {
//         res.status(400).send(error)
//     }
// })

//Get User By ID
router.get('/users/:id', async (req, res) => {
    const _id = req.params.id
    try {
        const user = await User.findById(_id)
        res.status(201).send(user)
    } catch (error) {
        res.status(400).send(error)
    }
})

//Delete User By ID
router.delete('/users/:id', async (req, res) => {
    try {
        const deleteUser = await User.findByIdAndDelete(req.params.id)
        if (!deleteUser){
            return res.status(404).send()
        }
        res.status(200).send(deleteUser)
    } catch (error) {
        res.status(400).send(error)
    }
})

//Update User by ID
router.patch('/users/:id', async (req, res) =>{
    const updates = Object.keys(req.body)
    const allowedUpdates = ['name', 'email', 'password', 'age']
    const isValid = updates.every((update) => allowedUpdates.includes(update))
    if(!isValid){
        return res.status(400).send({error: 'Not allowed to update this'})
    }
    try {
        const userUpdate = await User.findByIdAndUpdate(req.params.id)
        updates.forEach((update) => userUpdate[update] = req.body[update])
        await userUpdate.save()
        if(!userUpdate){
            return res.status(404).send()
        }
        res.status(201).send(userUpdate)
    } catch (error) {
        res.status(400).send(error)
    }
})

// const jwt = require('jsonwebtoken')
// const myFunction = async () => {
//     const token = jwt.sign( {_id: 'abc123'}, 'thisismynewtoken', {expiresIn: '7 days'})
//     console.log(token)
//     const verify = jwt.verify(token, 'thisismynewtoken')
//     console.log(verify._id)
// }
// myFunction() 

const main = async () => {
    // const task = await Task.findById('61cc2646b44eb242f0ed60e9')
    // console.log(task)
    // await task.populate('owner')
    // console.log(task.owner)
    // const user = await User.findById('61cc25232a46771f7240334a')
    // await user.populate('tasks')
    // console.log(user.tasks)
} 
main()  

// router.post("/mail", async (req, res) => {
//     const mail = {
//       to: "thronerush748_7@yahoo.com",
//       from: "hassan748_7@hotmail.com",
//       subject: "Asyncnow - Getting Started",
//       text: "You can register yourself by clicking on the given link below:",
//       html: `<p>You can register yourself by clicking on the given link below:</p><br><a href="http://localhost:3001/register">http://localhost:3001/register</a>`,
//     }
//     sgMail
//       .send(mail)
//       .then(() => {
//         console.log("Email sent")
//       })
//       .catch((error) => {
//         console.error(error)
//       })
//   })


import React, { Fragment } from "react"
import { Routes, Route, Navigate } from "react-router-dom"
import Header from "./components/headerComponent/header.component"
import Footer from "./components/footerComponent/footer.component"
import HomePage from "./components/homePage/home.component"
import Login from "./components/loginPage/login.component"
import Thanks from "./components/thanksPage/thanks.component"
import Error from "./components/404ErrorComponent/error.component"
import Dashboard from "./components/dashboardPage/dashboard.component"
import DashboardMain from "./components/dashboardPage/dashboardMain/dashboardMain.component"
import DashboardVideos from "./components/dashboardPage/dashboardVideos/dashboardVideos.component"
import DashboardInsights from "./components/dashboardPage/dashboardInsights/dashboardInsights.component"
import DashboardSettings from "./components/dashboardPage/dashboardSettings/dashboardSettings.component"
import Register from "./components/registerPage/register.component"
import CheckoutComponent from "./components/checkoutPage/checkout.component"
import PaypalCheckoutComponent from "./components/paypalCheckoutPage/paypalCheckout.component"
import OrderConfirmationComponent from "./components/orderConfirmationPage/orderConfirnation.component"
import { useRecoilValue } from "recoil"
import { userDataRecoil } from "./components/data/atom"
import ThemeConfig from "./theme"
import GlobalStyles from "./theme/globalStyles"
import ScrollToTop from "./components/ScrollToTop"
import { BaseOptionChartStyle } from "./components/charts/BaseOptionChart"
import DashboardLayout from "./layouts/dashboard"
import DashboardApp from "./pages/DashboardApp"
import User from "./pages/User"
import ".//assets/css/normalize.css"
import ".//assets/css/asyncnow.webflow.css"
import ".//assets/css/webflow.css"

function DashboardL() {
  return (
    <ThemeConfig>
      <ScrollToTop />
      <GlobalStyles />
      <BaseOptionChartStyle />
      <DashboardLayout />
    </ThemeConfig>
  )
}

function App() {
  // const { userRole } = useRecoilValue(userDataRecoil)
  const isAuthenticated = sessionStorage.getItem("isAuthenticated")
  const isRole = sessionStorage.getItem("isRole")
  return (
    <div>
      <Fragment>
        <Header />
        <Routes>
          <Route exact path="/" element={<HomePage title="Home" />} />
          <Route path="login" element={<Login title="Login" />} />
          <Route path="register" element={<Register title="Register" />} />
          <Route path="thanks" element={<Thanks title="Thanks" />} />
          {/* {isAuthenticated && (isRole === "Admin" || isRole === "Super Admin") ? ( */}
          <Route path="/dashboard" element={<DashboardL />}>
            <Route path="app" element={<DashboardApp />} />
            <Route path="user" element={<User />} />
          </Route>
          {/* ) : isAuthenticated && isRole === "User" ? ( */}
          {/* <> */}
          <Route path="checkout" element={<CheckoutComponent title="Checkout" />} />
          <Route path="paypal" element={<PaypalCheckoutComponent title="Paypal Checkout" />} />
          <Route path="order" element={<OrderConfirmationComponent title="Order Confirmation" />} />
          <Route path="dashboard" element={<Dashboard title="Dashboard" />}>
            <Route path="main" element={<DashboardMain />} />
            <Route path="videos" element={<DashboardVideos />} />
            <Route path="insights" element={<DashboardInsights />} />
            <Route path="settings" element={<DashboardSettings />} />
          </Route>
          {/* </> */}
          {/* ) : ( */}
          <Route path="dashboard" element={<Navigate to="/login" />} />
          {/* )} */}
          <Route path="*" exact={true} element={<Error title="404" />} />
        </Routes>
        <Footer />
      </Fragment>
    </div>
  )
}

export default App
