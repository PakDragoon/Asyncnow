// Run mongodb
// C:/Users/PakDragoon/mongodb/bin/mongod.exe --dbpath=C:/Users/PakDragoon/mongodb-data

// app.use((req, res, next) => {
//     if(req.method === 'GET' || req.method ==='POST') {
//         res.status(503).send('Servers are down for maintenance')
//     } else {
//         next()
//     }
// })

//Get all Users
// router.get('/users', auth, async (req, res) => {
//     try {
//         const users = await User.find({})
//         res.status(201).send(users)
//     } catch (error) {
//         res.status(400).send(error)
//     }
// })

//Get User By ID
router.get('/users/:id', async (req, res) => {
    const _id = req.params.id
    try {
        const user = await User.findById(_id)
        res.status(201).send(user)
    } catch (error) {
        res.status(400).send(error)
    }
})

//Delete User By ID
router.delete('/users/me', async (req, res) => {
    try {
        const deleteUser = await User.findByIdAndDelete(req.params.id)
        if (!deleteUser){
            return res.status(404).send()
        }
        res.status(200).send(deleteUser)
    } catch (error) {
        res.status(400).send(error)
    }
})

//Update User by ID
router.patch('/users/:id', async (req, res) =>{
    const updates = Object.keys(req.body)
    const allowedUpdates = ['name', 'email', 'password', 'age']
    const isValid = updates.every((update) => allowedUpdates.includes(update))
    if(!isValid){
        return res.status(400).send({error: 'Not allowed to update this'})
    }
    try {
        const userUpdate = await User.findByIdAndUpdate(req.params.id)
        updates.forEach((update) => userUpdate[update] = req.body[update])
        await userUpdate.save()
        if(!userUpdate){
            return res.status(404).send()
        }
        res.status(201).send(userUpdate)
    } catch (error) {
        res.status(400).send(error)
    }
})

// const jwt = require('jsonwebtoken')
// const myFunction = async () => {
//     const token = jwt.sign( {_id: 'abc123'}, 'thisismynewtoken', {expiresIn: '7 days'})
//     console.log(token)
//     const verify = jwt.verify(token, 'thisismynewtoken')
//     console.log(verify._id)
// }
// myFunction() 

const main = async () => {
    // const task = await Task.findById('61cc2646b44eb242f0ed60e9')
    // console.log(task)
    // await task.populate('owner')
    // console.log(task.owner)
    // const user = await User.findById('61cc25232a46771f7240334a')
    // await user.populate('tasks')
    // console.log(user.tasks)
} 
main()  